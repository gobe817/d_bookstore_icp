type AddBookCommentPayload = record {
  content : text;
  customer_id : nat64;
  book_id : nat64;
};
type AssetType = variant { Paperback; Hardcover; Ebook };
type AssignBookPayload = record { book_id : nat64; assigned_to : nat64 };
type Book = record {
  id : nat64;
  status : BookStatus;
  title : text;
  description : text;
  history : vec BookHistory;
  created_at : nat64;
  created_by : nat64;
  assigned_to : opt nat64;
  genre : BookGenre;
  comments : vec Comment;
};
type BookAsset = record {
  id : nat64;
  asset_name : text;
  asset_type : AssetType;
  depreciation_rate : float64;
  assigned_to : nat64;
  purchase_date : nat64;
  approx_value : float64;
};
type BookAssetPayload = record {
  asset_name : text;
  asset_type : AssetType;
  depreciation_rate : float64;
  assigned_to : nat64;
  purchase_date : nat64;
  approx_value : float64;
};
type BookGenre = variant {
  NonFiction;
  Mystery;
  Fiction;
  Science;
  Other;
  Fantasy;
  Biography;
};
type BookHistory = record { status : text; changed_at : nat64 };
type BookPayload = record {
  title : text;
  description : text;
  genre : BookGenre;
};
type BookStatus = variant { Available; Reserved; Sold };
type CalculateDepreciationPayload = record {
  book_asset_id : nat64;
  years : nat64;
};
type Comment = record {
  content : text;
  commented_at : nat64;
  customer_id : nat64;
};
type Customer = record {
  id : nat64;
  username : text;
  role : UserRole;
  created_at : nat64;
};
type CustomerPayload = record { username : text; role : UserRole };
type Message = variant {
  Error : text;
  InvalidPayload : text;
  NotFound : text;
  Success : text;
  UnAuthorized : text;
};
type Result = variant { Ok : Book; Err : Message };
type Result_1 = variant { Ok : float64; Err : Message };
type Result_2 = variant { Ok : BookAsset; Err : Message };
type Result_3 = variant { Ok : Customer; Err : Message };
type Result_4 = variant { Ok : vec BookAsset; Err : Message };
type Result_5 = variant { Ok : vec Book; Err : Message };
type Result_6 = variant { Ok : vec Customer; Err : Message };
type UpdateBookStatusPayload = record { id : nat64; status : BookStatus };
type UserRole = variant { Customer; StoreManager; Admin };
service : {
  add_book_comment : (AddBookCommentPayload) -> (Result);
  assign_book : (AssignBookPayload, CustomerPayload) -> (Result);
  calculate_depreciation : (CalculateDepreciationPayload) -> (Result_1);
  create_book : (BookPayload, CustomerPayload) -> (Result);
  create_book_asset : (BookAssetPayload, CustomerPayload) -> (Result_2);
  create_customer : (CustomerPayload) -> (Result_3);
  get_book_asset_by_id : (nat64) -> (Result_2) query;
  get_book_assets : () -> (Result_4) query;
  get_book_by_id : (nat64) -> (Result) query;
  get_books : () -> (Result_5) query;
  get_customer_by_id : (nat64) -> (Result_3) query;
  get_customers : () -> (Result_6) query;
  update_book_status : (UpdateBookStatusPayload) -> (Result);
}
